// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentFieldNames          = builder.RawFieldNames(&Payment{})
	paymentRows                = strings.Join(paymentFieldNames, ",")
	paymentRowsExpectAutoSet   = strings.Join(stringx.Remove(paymentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	paymentRowsWithPlaceHolder = strings.Join(stringx.Remove(paymentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	paymentModel interface {
		Insert(ctx context.Context, data *Payment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Payment, error)
		Update(ctx context.Context, data *Payment) error
		Delete(ctx context.Context, id int64) error
		FindOneByGoodsid(ctx context.Context, goodsid int64) (*Payment, error)
	}

	defaultPaymentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Payment struct {
		Id      int64 `db:"id"`
		Userid  int64 `db:"userid"`
		Goodsid int64 `db:"goodsid"`
		Status  int64 `db:"status"`
	}
)

func newPaymentModel(conn sqlx.SqlConn) *defaultPaymentModel {
	return &defaultPaymentModel{
		conn:  conn,
		table: "`payment`",
	}
}

func (m *defaultPaymentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
func (m *defaultPaymentModel) FindOneByGoodsid(ctx context.Context, goodsid int64) (*Payment, error) {
	var resp Payment
	query := fmt.Sprintf("select %s from %s where `goodsid` = ? limit 1", paymentRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, goodsid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPaymentModel) FindOne(ctx context.Context, id int64) (*Payment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paymentRows, m.table)
	var resp Payment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentModel) Insert(ctx context.Context, data *Payment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, paymentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Userid, data.Goodsid, data.Status)
	return ret, err
}

func (m *defaultPaymentModel) Update(ctx context.Context, data *Payment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paymentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Userid, data.Goodsid, data.Status, data.Id)
	return err
}

func (m *defaultPaymentModel) tableName() string {
	return m.table
}
