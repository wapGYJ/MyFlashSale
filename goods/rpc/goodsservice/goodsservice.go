// Code generated by goctl. DO NOT EDIT.
// Source: goods.proto

package goodsservice

import (
	"context"

	"myFlashSale/goods/rpc/pb/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CacheReq              = pb.CacheReq
	CacheResp             = pb.CacheResp
	GetGoodsFromCacheReq  = pb.GetGoodsFromCacheReq
	GetGoodsFromCacheResp = pb.GetGoodsFromCacheResp
	GetPriceReq           = pb.GetPriceReq
	GetPriceResp          = pb.GetPriceResp
	LockStockRequest      = pb.LockStockRequest
	LockStockResponse     = pb.LockStockResponse
	StockReq              = pb.StockReq
	StockResp             = pb.StockResp

	GoodsService interface {
		CheckStock(ctx context.Context, in *StockReq, opts ...grpc.CallOption) (*StockResp, error)
		LockStock(ctx context.Context, in *LockStockRequest, opts ...grpc.CallOption) (*LockStockResponse, error)
		GoodsCache(ctx context.Context, in *CacheReq, opts ...grpc.CallOption) (*CacheResp, error)
		GetGoodsFromCache(ctx context.Context, in *GetGoodsFromCacheReq, opts ...grpc.CallOption) (*GetGoodsFromCacheResp, error)
		GetPrice(ctx context.Context, in *GetPriceReq, opts ...grpc.CallOption) (*GetPriceResp, error)
	}

	defaultGoodsService struct {
		cli zrpc.Client
	}
)

func NewGoodsService(cli zrpc.Client) GoodsService {
	return &defaultGoodsService{
		cli: cli,
	}
}

func (m *defaultGoodsService) CheckStock(ctx context.Context, in *StockReq, opts ...grpc.CallOption) (*StockResp, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.CheckStock(ctx, in, opts...)
}

func (m *defaultGoodsService) LockStock(ctx context.Context, in *LockStockRequest, opts ...grpc.CallOption) (*LockStockResponse, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.LockStock(ctx, in, opts...)
}

func (m *defaultGoodsService) GoodsCache(ctx context.Context, in *CacheReq, opts ...grpc.CallOption) (*CacheResp, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.GoodsCache(ctx, in, opts...)
}

func (m *defaultGoodsService) GetGoodsFromCache(ctx context.Context, in *GetGoodsFromCacheReq, opts ...grpc.CallOption) (*GetGoodsFromCacheResp, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.GetGoodsFromCache(ctx, in, opts...)
}

func (m *defaultGoodsService) GetPrice(ctx context.Context, in *GetPriceReq, opts ...grpc.CallOption) (*GetPriceResp, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.GetPrice(ctx, in, opts...)
}
