// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: goods.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoodsService_CheckStock_FullMethodName        = "/pb.GoodsService/CheckStock"
	GoodsService_LockStock_FullMethodName         = "/pb.GoodsService/LockStock"
	GoodsService_GoodsCache_FullMethodName        = "/pb.GoodsService/GoodsCache"
	GoodsService_GetGoodsFromCache_FullMethodName = "/pb.GoodsService/GetGoodsFromCache"
	GoodsService_GetPrice_FullMethodName          = "/pb.GoodsService/GetPrice"
)

// GoodsServiceClient is the client API for GoodsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsServiceClient interface {
	CheckStock(ctx context.Context, in *StockReq, opts ...grpc.CallOption) (*StockResp, error)
	LockStock(ctx context.Context, in *LockStockRequest, opts ...grpc.CallOption) (*LockStockResponse, error)
	GoodsCache(ctx context.Context, in *CacheReq, opts ...grpc.CallOption) (*CacheResp, error)
	GetGoodsFromCache(ctx context.Context, in *GetGoodsFromCacheReq, opts ...grpc.CallOption) (*GetGoodsFromCacheResp, error)
	GetPrice(ctx context.Context, in *GetPriceReq, opts ...grpc.CallOption) (*GetPriceResp, error)
}

type goodsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsServiceClient(cc grpc.ClientConnInterface) GoodsServiceClient {
	return &goodsServiceClient{cc}
}

func (c *goodsServiceClient) CheckStock(ctx context.Context, in *StockReq, opts ...grpc.CallOption) (*StockResp, error) {
	out := new(StockResp)
	err := c.cc.Invoke(ctx, GoodsService_CheckStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) LockStock(ctx context.Context, in *LockStockRequest, opts ...grpc.CallOption) (*LockStockResponse, error) {
	out := new(LockStockResponse)
	err := c.cc.Invoke(ctx, GoodsService_LockStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GoodsCache(ctx context.Context, in *CacheReq, opts ...grpc.CallOption) (*CacheResp, error) {
	out := new(CacheResp)
	err := c.cc.Invoke(ctx, GoodsService_GoodsCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GetGoodsFromCache(ctx context.Context, in *GetGoodsFromCacheReq, opts ...grpc.CallOption) (*GetGoodsFromCacheResp, error) {
	out := new(GetGoodsFromCacheResp)
	err := c.cc.Invoke(ctx, GoodsService_GetGoodsFromCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GetPrice(ctx context.Context, in *GetPriceReq, opts ...grpc.CallOption) (*GetPriceResp, error) {
	out := new(GetPriceResp)
	err := c.cc.Invoke(ctx, GoodsService_GetPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServiceServer is the server API for GoodsService service.
// All implementations must embed UnimplementedGoodsServiceServer
// for forward compatibility
type GoodsServiceServer interface {
	CheckStock(context.Context, *StockReq) (*StockResp, error)
	LockStock(context.Context, *LockStockRequest) (*LockStockResponse, error)
	GoodsCache(context.Context, *CacheReq) (*CacheResp, error)
	GetGoodsFromCache(context.Context, *GetGoodsFromCacheReq) (*GetGoodsFromCacheResp, error)
	GetPrice(context.Context, *GetPriceReq) (*GetPriceResp, error)
	mustEmbedUnimplementedGoodsServiceServer()
}

// UnimplementedGoodsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServiceServer struct {
}

func (UnimplementedGoodsServiceServer) CheckStock(context.Context, *StockReq) (*StockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStock not implemented")
}
func (UnimplementedGoodsServiceServer) LockStock(context.Context, *LockStockRequest) (*LockStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockStock not implemented")
}
func (UnimplementedGoodsServiceServer) GoodsCache(context.Context, *CacheReq) (*CacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodsCache not implemented")
}
func (UnimplementedGoodsServiceServer) GetGoodsFromCache(context.Context, *GetGoodsFromCacheReq) (*GetGoodsFromCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsFromCache not implemented")
}
func (UnimplementedGoodsServiceServer) GetPrice(context.Context, *GetPriceReq) (*GetPriceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedGoodsServiceServer) mustEmbedUnimplementedGoodsServiceServer() {}

// UnsafeGoodsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServiceServer will
// result in compilation errors.
type UnsafeGoodsServiceServer interface {
	mustEmbedUnimplementedGoodsServiceServer()
}

func RegisterGoodsServiceServer(s grpc.ServiceRegistrar, srv GoodsServiceServer) {
	s.RegisterService(&GoodsService_ServiceDesc, srv)
}

func _GoodsService_CheckStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).CheckStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_CheckStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).CheckStock(ctx, req.(*StockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_LockStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).LockStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_LockStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).LockStock(ctx, req.(*LockStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GoodsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GoodsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_GoodsCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GoodsCache(ctx, req.(*CacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GetGoodsFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsFromCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetGoodsFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_GetGoodsFromCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetGoodsFromCache(ctx, req.(*GetGoodsFromCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetPrice(ctx, req.(*GetPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsService_ServiceDesc is the grpc.ServiceDesc for GoodsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GoodsService",
	HandlerType: (*GoodsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckStock",
			Handler:    _GoodsService_CheckStock_Handler,
		},
		{
			MethodName: "LockStock",
			Handler:    _GoodsService_LockStock_Handler,
		},
		{
			MethodName: "GoodsCache",
			Handler:    _GoodsService_GoodsCache_Handler,
		},
		{
			MethodName: "GetGoodsFromCache",
			Handler:    _GoodsService_GetGoodsFromCache_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _GoodsService_GetPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
