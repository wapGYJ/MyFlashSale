// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	theorderFieldNames          = builder.RawFieldNames(&Theorder{})
	theorderRows                = strings.Join(theorderFieldNames, ",")
	theorderRowsExpectAutoSet   = strings.Join(stringx.Remove(theorderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	theorderRowsWithPlaceHolder = strings.Join(stringx.Remove(theorderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	theorderModel interface {
		Insert(ctx context.Context, data *Theorder) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Theorder, error)
		FindOneByGoodsid(ctx context.Context, goodsid int64) (*Theorder, error)
		Update(ctx context.Context, data *Theorder) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTheorderModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Theorder struct {
		Id      int64  `db:"id"`
		Userid  int64  `db:"userid"`
		Goodsid int64  `db:"goodsid"`
		Content string `db:"content"`
	}
)

func newTheorderModel(conn sqlx.SqlConn) *defaultTheorderModel {
	return &defaultTheorderModel{
		conn:  conn,
		table: "`theorder`",
	}
}

func (m *defaultTheorderModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTheorderModel) FindOne(ctx context.Context, id int64) (*Theorder, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", theorderRows, m.table)
	var resp Theorder
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTheorderModel) FindOneByGoodsid(ctx context.Context, goodsid int64) (*Theorder, error) {
	var resp Theorder
	query := fmt.Sprintf("select %s from %s where `goodsid` = ? limit 1", theorderRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, goodsid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTheorderModel) Insert(ctx context.Context, data *Theorder) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, theorderRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Userid, data.Goodsid, data.Content)
	return ret, err
}

func (m *defaultTheorderModel) Update(ctx context.Context, newData *Theorder) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, theorderRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Userid, newData.Goodsid, newData.Content, newData.Id)
	return err
}

func (m *defaultTheorderModel) tableName() string {
	return m.table
}
